(def! reduce
  (let* [list-reduce
         (fn* [fp init xs]
           (if (empty? xs) init
             (list-reduce fp (fp init (first xs)) (rest xs))))

         vector-reduce
         (fn* [fp init xs idx len]
           (if (>= idx len) init
             (vector-reduce fp (fp init (nth xs idx)) xs (inc idx) len)))]

    (fn* [fp xs]
      (cond (empty? xs)
            nil

            (vector? xs)
            (if (= (count xs) 1)
              (nth xs 0)
              (vector-reduce fp (nth xs 0) xs 1 (count xs)))

            :else
            (if (empty? (rest xs))
              (first xs)
              (list-reduce fp (first xs) (rest xs)))))))

(def! foldl
  (let* [list-foldl
         (fn* [fp init xs]
           (if (empty? xs) init
             (list-foldl fp (fp init (first xs)) (rest xs))))

         vector-foldl
         (fn* [fp init xs idx len]
           (if (>= idx len) init
             (vector-foldl fp (fp init (nth xs idx)) xs (inc idx) len)))]

    (fn* [fp init xs]
      (if (vector? xs)
        (vector-foldl fp init xs 0 (count xs))
        (list-foldl fp init xs)))))

(def! foldr
  (let* [list-foldr
         (fn* [fp init xs]
           (if (empty? xs) init
             (list-foldr fp (fp (first xs) init) (rest xs))))

         vector-foldr
         (fn* [fp init xs idx]
           (if (< idx 0) init
             (vector-foldr fp (fp (nth xs idx) init) xs (dec idx))))]

    (fn* [fp init xs]
      (if (vector? xs)
        (vector-foldr fp init xs (dec (count xs)))
        (list-foldr fp init (reverse xs))))))

(def! reverse (fn* [xs]
  (foldl conj () xs)))

(def! every?
  (let* [list-every?
         (fn* [fp? xs]
           (b/or (empty? xs)
                 (b/and (fp? (first xs))
                        (list-every? fp? (rest xs)))))

        vector-every?
        (fn* [fp? xs idx len]
          (b/or (>= idx len)
                (b/and (fp? (nth xs idx))
                       (vector-every? fp? xs (inc idx) len))))]

    (fn* [fp? xs]
      (if (vector? xs)
        (vector-every? fp? xs 0 (count xs))
        (list-every? fp? xs)))))

(def! not-every? (fn* [fp? xs]
  (not (every? fp? xs))))

(def! some
  (let* [list-some
         (fn* [fp? xs]
           (b/and (not (empty? xs))
                  (b/or (fp? (first xs))
                        (list-some fp? (rest xs)))))

         vector-some
         (fn* [fp? xs idx len]
           (b/and (< idx len)
                  (b/or (fp? (nth xs idx))
                        (vector-some fp? xs (inc idx) len))))]

    (fn* [fp? xs]
      (if (vector? xs)
        (vector-some fp? xs 0 (count xs))
        (list-some fp? xs)))))

(def! not-any? (fn* [fp? xs]
  (not (some fp? xs))))

(def! member (fn* [elm lst]
  (if (empty? lst) nil
    (if (= elm (first lst)) lst
      (member elm (rest lst))))))

(defmacro! cons* (fn* [el ls & xs]
  (if (empty? xs)
    `(cons ~el ~ls)
    `(cons ~el (cons* ~ls ~@xs)))))
